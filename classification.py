# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2TxhUa-FclieDxidT_nRqxGGv-o3vY5
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""
# Recognizing hand-written digits

This example shows how scikit-learn can be used to recognize images of
hand-written digits, from 0-9.
"""

# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>
# License: BSD 3 clause

# Standard scientific Python imports
import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from skimage import data, color
from skimage.transform import rescale, resize, downscale_local_mean

import pandas as pd

#Loading the Data

digits = datasets.load_digits()
n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))
from sklearn.metrics import accuracy_score

gammas = [0.01, 0.005, 0.001]
C_list =  [0.1, 0.2, 0.5, 0.7, 1, 2, 5]

train_frac = 0.1
test_frac = 0.1
dev_frac = 0.1

X_train, X_dev_test, y_train, y_dev_test = train_test_split(
    data, digits.target, test_size=1-train_frac, shuffle=True
)

X_test,X_dev, y_test,y_dev = train_test_split(
    X_dev_test, y_dev_test, test_size=(dev_frac)/(1-train_frac), shuffle=True
)

df =pd.DataFrame()

pg = []
pc =[]
acc =[]

for gamma in gammas:
    for c in C_list:
        # Create a classifier: a support vector classifier
        clf = svm.SVC(gamma=gamma, C=c)
        
        # Learn the digits on the train subset
        clf.fit(X_train, y_train)

        # Predict the value of the digit on the dev subset
        predicted_dev = clf.predict(X_dev)
        
        score = accuracy_score(y_pred=predicted_dev,y_true=y_dev)
        
        pg.append(gamma)
        pc.append(c)
        acc.append(score)
        
predicted = clf.predict(X_test)
        
        
df['Gamma'] = pg
df['C']= pc
df['Accuracy'] = acc

df

ac= df['Accuracy']
maximum = ac.max()
index = ac.idxmax()

print("The best test score is ", maximum," corresponding to hyperparameters gamma= ",pg[index]," C=",pc[index])

"""#Question 2"""

digits = datasets.load_digits()
data = digits.images.reshape((n_samples, -1))

plt.figure(1, figsize=(3, 3))
plt.imshow(digits.images[0], cmap=plt.cm.gray_r, interpolation="nearest")
plt.show()
print(f"Image Size : {digits.images[0].size} ")

#For Resolution 1000*1000
from PIL import Image
_, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 10))
for ax, image, prediction in zip(axes, X_test, predicted):
    ax.set_axis_off()
    image = image.reshape(8,8)
    image = resize(image, (1000, 1000),anti_aliasing=True)
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
    
    ax.set_title(f"Prediction  : {prediction}" f" Size: {image.size}")
    print("the image with the size" f" Prediction: {prediction}" )
    print(f"image_resized :{image}\n")
    print("\n")

#For Resolution 2000*2000
from PIL import Image
_, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 10))
for ax, image, prediction in zip(axes, X_test, predicted):
    ax.set_axis_off()
    image = image.reshape(8,8)
    image = resize(image, (2000,2000),anti_aliasing=True)
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
    
    ax.set_title(f"Prediction  : {prediction}" f" Size: {image.size}")
    print("the image with the size" f" Prediction: {prediction}" )
    print(f"image_resized :{image}\n")
    print("\n")

#For Resolution 3000*3000
from PIL import Image
_, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 10))
for ax, image, prediction in zip(axes, X_test, predicted):
    ax.set_axis_off()
    image = image.reshape(8,8)
    image = resize(image, (3000,3000),anti_aliasing=True)
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
    
    ax.set_title(f"Prediction  : {prediction}" f" Size: {image.size}")
    print("the image with the size" f" Prediction: {prediction}" )
    print(f"image_resized :{image}\n")
    print("\n")

